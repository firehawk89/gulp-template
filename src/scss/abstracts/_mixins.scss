@use "./variables" as *;
@use "../abstracts/functions" as *;
@use "sass:math";

@mixin mask($url) {
  mask-image: ($url);
  -webkit-mask-image: url($url);
  mask-size: cover;
  -webkit-mask-size: cover;
  mask-repeat: no-repeat;
  -webkit-mask-repeat: no-repeat;
  mask-position: center center;
  -webkit-mask-position: center center;
}

@mixin adaptiveValue(
  $property,
  $startSize,
  $minSize,
  $widthFrom: $containerWidth,
  $widthTo: $minWidth,
  $keepSize: 0
) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }

  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $containerWidth and $containerMaxWidth == 0) {
    $widthFrom: $maxWidth;
  }

  $widthFromMedia: em($widthFrom);
  $widthToMedia: em($widthTo);

  // https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;

  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }

  $flyValue: #{rem($yIntersection)}" + " #{$slope * 100}vw;

  $propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

  @if ($minSize > $startSize) {
    $propertyValue: #{"clamp("
      rem($startSize)
      ","
      $flyValue
      ","
      rem($minSize)
      ")"};
  }

  // If clamp() is supported
  @supports (#{$property}: $propertyValue) {
    #{$property}: $propertyValue;
  }

  // If clamp() is not supported
  @supports not (#{$property}: $propertyValue) {
    #{$property}: calc(
      #{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div(
          $widthFrom,
          16
        ) - math.div($widthTo, 16)}
    );
  }

  @if $widthFrom !=
    $containerWidth and
    $widthFrom !=
    $maxWidth and
    $keepSize !=
    1 and
    $keepSize !=
    2
  {
    @media (min-width: $widthFromMedia) {
      #{$property}: inherit;
    }
  }

  @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
    @media (max-width: $widthToMedia) {
      #{$property}: inherit;
    }
  }
}

@mixin hover {
  @media (any-hover: hover) {
    &:hover {
      @content;
    }
  }
}

@mixin breakpoint($width, $type: max) {
  @media (#{$type}-width: em($width)) {
    @content;
  }
}

@mixin breakpoint_pc($type: max) {
  @media (#{$type}-width: $pc) {
    @content;
  }
}

@mixin breakpoint_tablet($type: max) {
  @media (#{$type}-width: $tablet) {
    @content;
  }
}

@mixin breakpoint_mobile_medium($type: max) {
  @media (#{$type}-width: $mobileMedium) {
    @content;
  }
}

@mixin breakpoint_mobile_small($type: max) {
  @media (#{$type}-width: $mobileSmall) {
    @content;
  }
}
